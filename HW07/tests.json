{
  "info": {
    "name": "API Workflow Test",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {"key": "host", "value": "arch.homework"},
    {"key": "username", "value": ""},
    {"key": "password", "value": ""},
    {"key": "amount", "value": ""},
    {"key": "price", "value": ""},
    {"key": "balance", "value": ""}
  ],
  "item": [
    {
      "name": "1. Create User",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const random = Math.floor(Math.random() * 10000);",
              "pm.collectionVariables.set('username', `user_${random}`);",
              "pm.collectionVariables.set('password', `pass_${random}`);"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "formdata",
          "formdata": [
            {"key": "username", "value": "{{username}}"},
            {"key": "password", "value": "{{password}}"}
          ]
        },
        "url": {
          "raw": "http://{{host}}/users",
          "protocol": "http",
          "host": ["{{host}}"],
          "path": ["users"]
        }
      },
      "response": []
    },
    {
      "name": "2. Login User",
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "formdata",
          "formdata": [
            {"key": "username", "value": "{{username}}"},
            {"key": "password", "value": "{{password}}"}
          ]
        },
        "url": {
          "raw": "http://{{host}}/users/login",
          "protocol": "http",
          "host": ["{{host}}"],
          "path": ["users", "login"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code 200', () => pm.response.to.have.status(200));",
              "pm.test('Authorization cookie exists', () => {",
              "  pm.expect(pm.cookies.has('Authorization')).to.be.true;",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "3. Make Deposit",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const amount = Math.floor(Math.random() * 51) + 50;",
              "pm.collectionVariables.set('amount', amount.toString());"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "formdata",
          "formdata": [
            {"key": "amount", "value": "{{amount}}"}
          ]
        },
        "url": {
          "raw": "http://{{host}}/billing/deposit",
          "protocol": "http",
          "host": ["{{host}}"],
          "path": ["billing", "deposit"]
        }
      },
      "response": []
    },
    {
      "name": "4. Create Order (Success)",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const amount = pm.collectionVariables.get('amount');",
              "const price = amount - 10;",
              "pm.collectionVariables.set('price', price.toString());"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "formdata",
          "formdata": [
            {"key": "price", "value": "{{price}}"}
          ]
        },
        "url": {
          "raw": "http://{{host}}/orders",
          "protocol": "http",
          "host": ["{{host}}"],
          "path": ["orders"]
        }
      },
      "response": []
    },
    {
      "name": "5. Check Balance",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "http://{{host}}/balance",
          "protocol": "http",
          "host": ["{{host}}"],
          "path": ["balance"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Balance is correct', () => {",
              "  const balance = pm.response.json().balance;",
              "  const expected = parseInt(pm.collectionVariables.get('amount')) -",
              "    parseInt(pm.collectionVariables.get('price'));",
              "  pm.expect(balance).to.equal(expected);",
              "  pm.collectionVariables.set('balance', balance.toString());",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "6. Check Messages (1)",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "http://{{host}}/messages",
          "protocol": "http",
          "host": ["{{host}}"],
          "path": ["messages"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Messages array has 1 element', () => {",
              "  pm.expect(pm.response.json()).to.be.an('array').with.lengthOf(1);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "7. Create Order (Fail)",
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "formdata",
          "formdata": [
            {"key": "price", "value": "200"}
          ]
        },
        "url": {
          "raw": "http://{{host}}/orders",
          "protocol": "http",
          "host": ["{{host}}"],
          "path": ["orders"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code 400', () => pm.response.to.have.status(400));"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "8. Check Balance Again",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "http://{{host}}/balance",
          "protocol": "http",
          "host": ["{{host}}"],
          "path": ["balance"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Balance remains same', () => {",
              "  const currentBalance = pm.response.json().balance;",
              "  const expected = pm.collectionVariables.get('balance');",
              "  pm.expect(currentBalance.toString()).to.equal(expected);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "9. Check Messages (2)",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "http://{{host}}/messages",
          "protocol": "http",
          "host": ["{{host}}"],
          "path": ["messages"]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Messages array has 2 elements', () => {",
              "  pm.expect(pm.response.json()).to.be.an('array').with.lengthOf(2);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    }
  ]
}