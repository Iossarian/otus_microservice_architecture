version: '3.1'

services:
  order-service:
    build:
      context: ./order
      dockerfile: Dockerfile
    container_name: order-service
    restart: always
    environment:
      - HTTP_PORT=8000
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
      - POSTGRES_HOST=order-postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=orderdb
    ports:
      - '8000:8000'
    depends_on:
      order-postgres:
        condition: service_healthy
      order-migration:
        condition: service_completed_successfully
    command: [ "/app", "rest" ]
  order-migration:
    build:
      context: ./order
      dockerfile: Dockerfile
    container_name: order-migration
    restart: on-failure
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
      - POSTGRES_HOST=order-postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=orderdb
    depends_on:
      order-postgres:
        condition: service_healthy
    command: [ "/app", "migrate", "up" ]
  order-postgres:
    image: postgres:15-alpine
    container_name: order-postgres
    restart: always
    environment:
      POSTGRES_DB: orderdb
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - order_postgres_data:/var/lib/postgresql/data
    ports:
      - '5437:5432'
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U user -d orderdb" ]
      interval: 5s
      retries: 5

volumes:
  order_postgres_data: